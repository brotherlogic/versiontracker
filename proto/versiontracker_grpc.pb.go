// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VersionTrackerServiceClient is the client API for VersionTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersionTrackerServiceClient interface {
	NewVersion(ctx context.Context, in *NewVersionRequest, opts ...grpc.CallOption) (*NewVersionResponse, error)
	NewJob(ctx context.Context, in *NewJobRequest, opts ...grpc.CallOption) (*NewJobResponse, error)
}

type versionTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVersionTrackerServiceClient(cc grpc.ClientConnInterface) VersionTrackerServiceClient {
	return &versionTrackerServiceClient{cc}
}

func (c *versionTrackerServiceClient) NewVersion(ctx context.Context, in *NewVersionRequest, opts ...grpc.CallOption) (*NewVersionResponse, error) {
	out := new(NewVersionResponse)
	err := c.cc.Invoke(ctx, "/versiontracker.VersionTrackerService/NewVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTrackerServiceClient) NewJob(ctx context.Context, in *NewJobRequest, opts ...grpc.CallOption) (*NewJobResponse, error) {
	out := new(NewJobResponse)
	err := c.cc.Invoke(ctx, "/versiontracker.VersionTrackerService/NewJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionTrackerServiceServer is the server API for VersionTrackerService service.
// All implementations should embed UnimplementedVersionTrackerServiceServer
// for forward compatibility
type VersionTrackerServiceServer interface {
	NewVersion(context.Context, *NewVersionRequest) (*NewVersionResponse, error)
	NewJob(context.Context, *NewJobRequest) (*NewJobResponse, error)
}

// UnimplementedVersionTrackerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVersionTrackerServiceServer struct {
}

func (UnimplementedVersionTrackerServiceServer) NewVersion(context.Context, *NewVersionRequest) (*NewVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewVersion not implemented")
}
func (UnimplementedVersionTrackerServiceServer) NewJob(context.Context, *NewJobRequest) (*NewJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewJob not implemented")
}

// UnsafeVersionTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersionTrackerServiceServer will
// result in compilation errors.
type UnsafeVersionTrackerServiceServer interface {
	mustEmbedUnimplementedVersionTrackerServiceServer()
}

func RegisterVersionTrackerServiceServer(s grpc.ServiceRegistrar, srv VersionTrackerServiceServer) {
	s.RegisterService(&_VersionTrackerService_serviceDesc, srv)
}

func _VersionTrackerService_NewVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTrackerServiceServer).NewVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versiontracker.VersionTrackerService/NewVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTrackerServiceServer).NewVersion(ctx, req.(*NewVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTrackerService_NewJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTrackerServiceServer).NewJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/versiontracker.VersionTrackerService/NewJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTrackerServiceServer).NewJob(ctx, req.(*NewJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionTrackerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "versiontracker.VersionTrackerService",
	HandlerType: (*VersionTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewVersion",
			Handler:    _VersionTrackerService_NewVersion_Handler,
		},
		{
			MethodName: "NewJob",
			Handler:    _VersionTrackerService_NewJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "versiontracker.proto",
}
